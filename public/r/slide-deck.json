{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slide-deck",
  "type": "registry:ui",
  "title": "Slide Deck",
  "description": "A slide deck component that displays a list of images.",
  "dependencies": [
    "react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/augustui/slide-deck.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useMemo } from \"react\";\nimport { motion } from \"motion/react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SlideDeckProps {\n  images: string[];\n  initialIndex?: number;\n}\n\nexport default function SlideDeck({\n  images = [\n    \"https://plus.unsplash.com/premium_photo-1661962542692-4fe7a4ad6b54?q=80&w=2942&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://plus.unsplash.com/premium_photo-1661962305764-375ef76a3fb5?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://plus.unsplash.com/premium_photo-1697729844084-c03db2377161?q=80&w=2969&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1519802772250-a52a9af0eacb?q=80&w=3136&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1442570468985-f63ed5de9086?q=80&w=3020&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1506461883276-594a12b11cf3?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1477587458883-47145ed94245?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  ],\n  initialIndex = Math.floor(images.length / 2),\n}: SlideDeckProps) {\n  const [activeIndex, setActiveIndex] = useState(\n    initialIndex < images.length ? initialIndex : 0,\n  );\n\n  const prev = () =>\n    setActiveIndex((prev) => (prev - 1 + images.length) % images.length);\n  const next = () => setActiveIndex((prev) => (prev + 1) % images.length);\n\n  // Calculate visible slides and their positions\n  const visibleSlides = useMemo(() => {\n    // If we have fewer than 7 images, just show all of them\n    if (images.length <= 7) {\n      return images.map((_, i) => ({\n        index: i,\n        position: i - activeIndex,\n      }));\n    }\n\n    // For more than 7 images, we need to handle wrapping correctly\n    const result = [];\n    const seenIndices = new Set(); // Track which indices we've already included\n\n    // Add the active slide first\n    result.push({ index: activeIndex, position: 0 });\n    seenIndices.add(activeIndex);\n\n    // Add up to 3 slides on each side\n    for (let offset = 1; offset <= 3; offset++) {\n      // Add slide to the left\n      const leftIndex = (activeIndex - offset + images.length) % images.length;\n      if (!seenIndices.has(leftIndex)) {\n        result.push({ index: leftIndex, position: -offset });\n        seenIndices.add(leftIndex);\n      }\n\n      // Add slide to the right\n      const rightIndex = (activeIndex + offset) % images.length;\n      if (!seenIndices.has(rightIndex)) {\n        result.push({ index: rightIndex, position: offset });\n        seenIndices.add(rightIndex);\n      }\n    }\n\n    // Sort by position to ensure correct rendering order\n    return result.sort((a, b) => a.position - b.position);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeIndex, images.length]);\n\n  return (\n    <div className=\"relative flex h-[260px] w-full items-center justify-center overflow-hidden bg-black\">\n      <button\n        onClick={prev}\n        className=\"absolute left-3 z-30 rounded-full bg-black/40 p-2.5 transition-colors hover:bg-black/60\"\n        aria-label=\"Previous slide\"\n      >\n        <ChevronLeft className=\"size-4 text-white\" />\n      </button>\n\n      <div className=\"relative flex size-full items-center justify-center\">\n        {visibleSlides.map(({ index, position }) => {\n          // Calculate distance from center (active slide)\n          const distanceFromCenter = Math.abs(position);\n          const isActive = distanceFromCenter === 0;\n          const isLeft = position < 0;\n\n          // Calculate size based on distance from active\n          const getWidth = () => {\n            if (isActive) return 320; // Even smaller main image\n            if (distanceFromCenter === 1) return 55;\n            if (distanceFromCenter === 2) return 40;\n            return 30;\n          };\n\n          const getHeight = () => {\n            if (isActive) return 200; // Smaller height\n            if (distanceFromCenter === 1) return 160;\n            if (distanceFromCenter === 2) return 120;\n            return 90;\n          };\n\n          const getOpacity = () => {\n            if (isActive) return 1;\n            if (distanceFromCenter === 1) return 1;\n            if (distanceFromCenter === 2) return 0.9;\n            return 0.7;\n          };\n\n          // Calculate horizontal position for proper spacing\n          const getTranslateX = () => {\n            if (isActive) return 0;\n            const direction = isLeft ? -1 : 1;\n\n            // Increased gap between main and first side image\n            const baseOffset = 200; // Main to first image gap\n\n            if (distanceFromCenter === 1) return direction * baseOffset;\n            if (distanceFromCenter === 2) return direction * (baseOffset + 60);\n            return direction * (baseOffset + 100);\n          };\n\n          return (\n            <motion.div\n              key={`slide-${index}`}\n              className={cn(\n                \"absolute overflow-hidden rounded-lg transition-all\",\n                {\n                  \"shadow-2xl\": isActive,\n                  \"shadow-md\": !isActive,\n                },\n              )}\n              style={{\n                width: getWidth(),\n                height: getHeight(),\n                zIndex: isActive ? 20 : 10 - distanceFromCenter,\n                borderRadius: \"8px\", // Even smaller border radius\n              }}\n              animate={{\n                width: getWidth(),\n                height: getHeight(),\n                opacity: getOpacity(),\n                x: getTranslateX(),\n                scale: isActive ? 1 : 1 - distanceFromCenter * 0.05,\n              }}\n              transition={{\n                duration: 0.4,\n                ease: \"easeInOut\",\n                opacity: { duration: 0.3 },\n              }}\n              whileHover={\n                !isActive\n                  ? {\n                      y: -5,\n                      scale: 1.02,\n                      transition: { duration: 0.2 },\n                    }\n                  : undefined\n              }\n            >\n              <img\n                src={images[index]}\n                alt={`slide-${index}`}\n                className=\"size-full object-cover\"\n              />\n            </motion.div>\n          );\n        })}\n      </div>\n\n      <button\n        onClick={next}\n        className=\"absolute right-3 z-30 rounded-full bg-black/40 p-2.5 transition-colors hover:bg-black/60\"\n        aria-label=\"Next slide\"\n      >\n        <ChevronRight className=\"size-4 text-white\" />\n      </button>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/augustui/slide-deck.tsx"
    }
  ]
}