{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "luminous-veil",
  "type": "registry:ui",
  "title": "Luminous Veil",
  "description": "A refined background component featuring soft, cascading light beams for an elegant and immersive experience.",
  "dependencies": [
    "motion",
    "react"
  ],
  "files": [
    {
      "path": "registry/augustui/luminous-veil.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LuminousVeilProps {\n  className?: string;\n  intensity?: \"subtle\" | \"medium\" | \"strong\";\n  theme?: \"light\" | \"dark\" | \"system\";\n}\n\ninterface Veil {\n  x: number;\n  y: number;\n  width: number;\n  length: number;\n  angle: number;\n  speed: number;\n  opacity: number;\n  hue: number;\n  pulse: number;\n  pulseSpeed: number;\n}\n\nfunction createVeil(width: number, height: number): Veil {\n  const angle = -35 + Math.random() * 10;\n  return {\n    x: Math.random() * width * 1.5 - width * 0.25,\n    y: Math.random() * height * 1.5 - height * 0.25,\n    width: 30 + Math.random() * 60,\n    length: height * 2.5,\n    angle: angle,\n    speed: 0.6 + Math.random() * 1.2,\n    opacity: 0.12 + Math.random() * 0.16,\n    hue: 190 + Math.random() * 70,\n    pulse: Math.random() * Math.PI * 2,\n    pulseSpeed: 0.02 + Math.random() * 0.03,\n  };\n}\n\nexport default function LuminousVeil({\n  className,\n  intensity = \"strong\",\n  theme = \"system\",\n}: LuminousVeilProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const veilsRef = useRef<Veil[]>([]);\n  const animationFrameRef = useRef<number>(0);\n  const MINIMUM_VEILS = 20;\n\n  const opacityMap = {\n    subtle: 0.7,\n    medium: 0.85,\n    strong: 1,\n  };\n\n  // Determine background color based on theme prop\n  const getBackgroundClass = () => {\n    if (theme === \"light\") return \"bg-white\";\n    if (theme === \"dark\") return \"bg-black\";\n    return \"bg-background\"; // System theme (uses CSS variables)\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\", { alpha: true });\n    if (!ctx) return;\n\n    const updateCanvasSize = () => {\n      const dpr = Math.min(window.devicePixelRatio || 1, 2);\n      const container = canvas.parentElement;\n      if (!container) return;\n\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n      ctx.scale(dpr, dpr);\n\n      const isMobile = rect.width < 768;\n      const totalVeils = MINIMUM_VEILS * (isMobile ? 1 : 1.5);\n      veilsRef.current = Array.from({ length: totalVeils }, () =>\n        createVeil(canvas.width, canvas.height),\n      );\n    };\n\n    updateCanvasSize();\n\n    let resizeTimeout: NodeJS.Timeout;\n    const handleResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(updateCanvasSize, 100);\n    };\n\n    // Use ResizeObserver to detect parent size changes\n    const resizeObserver = new ResizeObserver(handleResize);\n    if (canvas.parentElement) {\n      resizeObserver.observe(canvas.parentElement);\n    }\n\n    ctx.filter = \"blur(0px)\";\n\n    function resetVeil(veil: Veil, index: number, totalVeils: number) {\n      if (!canvas) return veil;\n\n      const column = index % 3;\n      const spacing = canvas.width / 3;\n\n      veil.y = canvas.height + 100;\n      veil.x =\n        column * spacing + spacing / 2 + (Math.random() - 0.5) * spacing * 0.5;\n      veil.width = 100 + Math.random() * 100;\n      veil.speed = 0.5 + Math.random() * 0.4;\n      veil.hue = 190 + (index * 70) / totalVeils;\n      veil.opacity = 0.2 + Math.random() * 0.1;\n      return veil;\n    }\n\n    function drawVeil(ctx: CanvasRenderingContext2D, veil: Veil) {\n      ctx.save();\n      ctx.translate(veil.x, veil.y);\n      ctx.rotate((veil.angle * Math.PI) / 180);\n\n      const pulsingOpacity =\n        veil.opacity *\n        (0.8 + Math.sin(veil.pulse) * 0.2) *\n        opacityMap[intensity];\n\n      const gradient = ctx.createLinearGradient(0, 0, 0, veil.length);\n\n      gradient.addColorStop(0, `hsla(${veil.hue}, 85%, 65%, 0)`);\n      gradient.addColorStop(\n        0.1,\n        `hsla(${veil.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`,\n      );\n      gradient.addColorStop(\n        0.4,\n        `hsla(${veil.hue}, 85%, 65%, ${pulsingOpacity})`,\n      );\n      gradient.addColorStop(\n        0.6,\n        `hsla(${veil.hue}, 85%, 65%, ${pulsingOpacity})`,\n      );\n      gradient.addColorStop(\n        0.9,\n        `hsla(${veil.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`,\n      );\n      gradient.addColorStop(1, `hsla(${veil.hue}, 85%, 65%, 0)`);\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(-veil.width / 2, 0, veil.width, veil.length);\n      ctx.restore();\n    }\n\n    function animate() {\n      if (!canvas || !ctx) return;\n\n      // Set background color based on theme\n      if (theme === \"light\") {\n        ctx.fillStyle = \"#ffffff\";\n      } else if (theme === \"dark\") {\n        ctx.fillStyle = \"#000000\";\n      } else {\n        ctx.fillStyle = getComputedStyle(document.documentElement)\n          .getPropertyValue(\"--background\")\n          .trim();\n      }\n\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const totalVeils = veilsRef.current.length;\n      veilsRef.current.forEach((veil, index) => {\n        veil.y -= veil.speed;\n        veil.pulse += veil.pulseSpeed;\n\n        if (veil.y + veil.length < -100) {\n          resetVeil(veil, index, totalVeils);\n        }\n\n        drawVeil(ctx, veil);\n      });\n\n      animationFrameRef.current = requestAnimationFrame(animate);\n    }\n\n    animate();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      resizeObserver.disconnect();\n      clearTimeout(resizeTimeout);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [intensity, theme]);\n\n  return (\n    <div\n      className={cn(\n        \"absolute left-0 top-0 size-full overflow-hidden\",\n        getBackgroundClass(),\n        className,\n      )}\n      style={{\n        backgroundColor:\n          theme === \"light\" ? \"white\" : theme === \"dark\" ? \"black\" : \"\",\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0\"\n        style={{ filter: \"blur(15px)\" }}\n      />\n\n      <motion.div\n        className={cn(\"absolute inset-0 size-full\", getBackgroundClass())}\n        animate={{\n          opacity: [0.05, 0.15, 0.05],\n        }}\n        transition={{\n          duration: 10,\n          ease: \"easeInOut\",\n          repeat: Number.POSITIVE_INFINITY,\n        }}\n        style={{\n          backdropFilter: \"blur(50px)\",\n          backgroundColor:\n            theme === \"light\" ? \"white\" : theme === \"dark\" ? \"black\" : \"\",\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/augustui/luminous-veil.tsx"
    }
  ]
}