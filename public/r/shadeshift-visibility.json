{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadeshift-visibility",
  "type": "registry:ui",
  "title": "ShadeShift Visibility",
  "description": "A shade shift visibility component that displays a list of text.",
  "dependencies": [
    "react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/augustui/shadeshift-visibility.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\ninterface ShadeShiftVisibilityProps {\n  src: string;\n  alt?: string;\n  circleSize?: number;\n}\n\nexport default function ShadeShiftVisibility({\n  src = \"https://images.unsplash.com/photo-1741851374430-d242e0dcd70c?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  alt = \"Image\",\n  circleSize = 100,\n}: ShadeShiftVisibilityProps) {\n  const [clickStage, setClickStage] = useState<0 | 1 | 2>(0); // 0: dimmed, 1: undimmed with hover colorful, 2: fully colorful\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = () => {\n    if (clickStage < 2) {\n      setClickStage((prev) => (prev + 1) as 0 | 1 | 2);\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      setMousePosition({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      });\n    }\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovering(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovering(false);\n  };\n\n  // Create the clip-path for the circle reveal\n  const getClipPath = () => {\n    if (isHovering) {\n      if (clickStage === 0) {\n        // Undimmed grayscale circle\n        return `circle(${circleSize}px at ${mousePosition.x}px ${mousePosition.y}px)`;\n      } else if (clickStage === 1) {\n        // Colorful circle\n        return `circle(${circleSize}px at ${mousePosition.x}px ${mousePosition.y}px)`;\n      }\n    }\n    return \"none\";\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative max-h-[350px] w-full cursor-pointer overflow-hidden\"\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {/* Base layer - always present */}\n      <img\n        src={src}\n        alt={alt}\n        className={cn(\n          \"absolute left-0 top-0 size-full object-cover transition duration-300\",\n          clickStage === 0 && \"brightness-50 grayscale\", // Apply dimming filter to grayscale image in stage 0\n          clickStage === 1 && \"grayscale\", // Only grayscale in stage 1\n        )}\n        style={{ objectPosition: \"center\" }}\n      />\n\n      {/* Circle reveal for stage 0 (undimmed grayscale) - only when hovering */}\n      {clickStage === 0 && isHovering && (\n        <div\n          className=\"pointer-events-none absolute inset-0\"\n          style={{\n            clipPath: getClipPath(),\n            top: 0,\n            left: 0,\n          }}\n        >\n          <img\n            src={src}\n            alt=\"\"\n            className=\"absolute left-0 top-0 size-full object-cover grayscale\"\n            style={{ objectPosition: \"center\" }}\n          />\n        </div>\n      )}\n\n      {/* Colorful image for stages 1 and 2 */}\n      {(clickStage === 2 || (clickStage === 1 && isHovering)) && (\n        <div\n          className=\"pointer-events-none absolute inset-0\"\n          style={{\n            clipPath: clickStage === 1 ? getClipPath() : undefined,\n            top: 0,\n            left: 0,\n          }}\n        >\n          <img\n            src={src}\n            alt=\"\"\n            className=\"absolute left-0 top-0 size-full object-cover\"\n            style={{ objectPosition: \"center\" }}\n          />\n        </div>\n      )}\n\n      {/* Invisible spacer to maintain container height */}\n      <div className=\"w-full\" style={{ paddingBottom: \"56.25%\" }}></div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/augustui/shadeshift-visibility.tsx"
    }
  ]
}