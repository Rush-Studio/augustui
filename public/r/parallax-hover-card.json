{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parallax-hover-card",
  "type": "registry:ui",
  "title": "Parallax Hover Card",
  "description": "A parallax hover card component that displays a list of text.",
  "dependencies": [
    "react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/augustui/parallax-hover-card.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { motion, useMotionValue, useSpring, useInView } from \"motion/react\";\n\nexport interface Layer {\n  type: \"backgroundImage\" | \"heading\" | \"subheading\" | \"foregroundImage\";\n  src?: string;\n  alt?: string;\n  content?: React.ReactNode;\n  depth: number;\n  className: string;\n}\n\nexport default function ParallaxHoverCard({\n  layers = [\n    {\n      type: \"backgroundImage\",\n      src: \"https://plus.unsplash.com/premium_photo-1714051660720-888e8454a021?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n      alt: \"Sky\",\n      depth: 0, // No parallax for background\n      className: \"z-10\",\n    },\n    {\n      type: \"heading\",\n      content: (\n        <h2 className=\"text-2xl font-bold text-white uppercase\">\n          PARALLAX CARD\n        </h2>\n      ),\n      depth: 0.3,\n      className: \"z-30\",\n    },\n    {\n      type: \"foregroundImage\",\n      src: \"/liberty.png\",\n      alt: \"Castle\",\n      depth: 0.5, // Reduced parallax for foreground\n      className: \"z-20\",\n    },\n    {\n      type: \"subheading\",\n      content: (\n        <div className=\"flex flex-col\">\n          <p className=\"text-sm\">Status of Liberty</p>\n          <p className=\"text-sm\">New York City, USA</p>\n        </div>\n      ),\n      depth: 0,\n      className: \"z-40\",\n    },\n  ],\n  maxOffsetX = 400,\n  maxOffsetY = 2000,\n}: {\n  layers: Layer[];\n  maxOffsetX?: number;\n  maxOffsetY?: number;\n}) {\n  const SPRING_CONFIG = { damping: 100, stiffness: 400 };\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const springX = useSpring(x, SPRING_CONFIG);\n  const springY = useSpring(y, SPRING_CONFIG);\n  const ref = useRef<HTMLDivElement>(null);\n  const isInView = useInView(ref);\n\n  useEffect(() => {\n    if (!isInView) {\n      x.set(0);\n      y.set(0);\n    }\n  }, [isInView]);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!ref.current || !isInView) return;\n      const rect = ref.current.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n\n      let distanceX = e.clientX - centerX;\n      let distanceY = e.clientY - centerY;\n\n      // Limit the maximum offset to prevent revealing edges\n      distanceX = Math.max(Math.min(distanceX, maxOffsetX), -maxOffsetX);\n      distanceY = Math.max(Math.min(distanceY, maxOffsetY), -maxOffsetY);\n\n      x.set(distanceX / 20);\n      y.set(distanceY / 20);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    return () => document.removeEventListener(\"mousemove\", handleMouseMove);\n  }, [isInView, maxOffsetX, maxOffsetY]);\n\n  return (\n    <div\n      className=\"relative w-[250px] h-[250px] overflow-hidden rounded-xl\"\n      ref={ref}\n    >\n      {layers.map((layer, index) => {\n        const layerX = useSpring(0, SPRING_CONFIG);\n        const layerY = useSpring(0, SPRING_CONFIG);\n\n        useEffect(() => {\n          if (layer.depth) {\n            const unsubX = springX.onChange((latest) => {\n              // Reduce the multiplier to make movement less intense\n              layerX.set(latest * layer.depth * 3);\n            });\n            const unsubY = springY.onChange((latest) => {\n              // Reduce the multiplier to make movement less intense\n              layerY.set(latest * layer.depth * 3);\n            });\n            return () => {\n              unsubX();\n              unsubY();\n            };\n          }\n        }, [layer.depth]);\n\n        return (\n          <motion.div\n            key={index}\n            className={`absolute w-full h-full ${layer.className}`}\n            style={{\n              x: layerX,\n              y: layerY,\n            }}\n          >\n            {layer.type === \"backgroundImage\" ||\n            layer.type === \"foregroundImage\" ? (\n              <img\n                src={layer.src}\n                alt={layer.alt}\n                className={`w-full h-full scale-150 ${layer.type === \"backgroundImage\" ? \"object-cover\" : \"object-contain\"}`}\n              />\n            ) : (\n              <div\n                className={`flex w-full h-full ${\n                  layer.type === \"subheading\"\n                    ? 'items-end justify-center pb-2 after:content-[\"\"] after:absolute after:bottom-0 after:left-0 after:w-full after:h-16 after:bg-gradient-to-t after:from-background/60 after:to-transparent after:backdrop-blur-sm after:rounded-b-xl'\n                    : layer.type === \"heading\"\n                      ? 'items-start justify-center pt-6 after:content-[\"\"] after:absolute after:top-0 after:left-0 after:w-full after:h-16'\n                      : \"\"\n                }`}\n              >\n                <div\n                  className={`${layer.type === \"subheading\" ? \"z-10 relative mb-0 px-4 text-center\" : layer.type === \"heading\" ? \"z-10 relative mt-2 px-4 text-center\" : \"\"}`}\n                >\n                  {layer.content}\n                </div>\n              </div>\n            )}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/augustui/parallax-hover-card.tsx"
    }
  ]
}