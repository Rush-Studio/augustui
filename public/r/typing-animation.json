{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typing-animation",
  "type": "registry:ui",
  "title": "Typing Animation",
  "description": "A typing animation component that animates text as it's typed and retyped.",
  "dependencies": [
    "motion",
    "react"
  ],
  "files": [
    {
      "path": "registry/augustui/typing-animation.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\n\ninterface TypingAnimationProps {\n  text: string | string[];\n  className?: string;\n  cursorClassName?: string;\n  speed?: number;\n  cursor?: string | React.ReactNode;\n  loop?: boolean;\n  deleteSpeed?: number;\n  delay?: number;\n  onTextChange?: (text: string) => void;\n}\n\nexport default function TypingAnimation({\n  text,\n  className,\n  cursorClassName,\n  speed = 100,\n  cursor = \"|\",\n  loop = false,\n  deleteSpeed = 50,\n  delay = 1500,\n  onTextChange,\n}: TypingAnimationProps) {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [textArrayIndex, setTextArrayIndex] = useState(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  // Process text input to handle both string and array\n  const textArray = useMemo(\n    () => (Array.isArray(text) ? text : [text]),\n    [text],\n  );\n  const currentText = textArray[textArrayIndex] || \"\";\n\n  // Get a slightly randomized delay for more natural typing\n  const getTypingDelay = useCallback(() => {\n    // Random delay between 0.8x and 1.2x of the base speed\n    return (isDeleting ? deleteSpeed : speed) * (0.8 + Math.random() * 0.4);\n  }, [speed, deleteSpeed, isDeleting]);\n\n  // Clear timeout helper\n  const clearTimeoutRef = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  // Reset when text prop changes\n  useEffect(() => {\n    setDisplayedText(\"\");\n    setCurrentIndex(0);\n    setIsDeleting(false);\n    setTextArrayIndex(0);\n    clearTimeoutRef();\n  }, [text, clearTimeoutRef]);\n\n  useEffect(() => {\n    if (!currentText) return;\n\n    const handleTyping = () => {\n      if (!isDeleting) {\n        // Typing mode\n        if (currentIndex < currentText.length) {\n          // Still have characters to type\n          const newText = currentText.slice(0, currentIndex + 1);\n          setDisplayedText(newText);\n          setCurrentIndex((prev) => prev + 1);\n\n          if (onTextChange) {\n            onTextChange(newText);\n          }\n        } else {\n          // Finished typing current text\n          if (loop || textArrayIndex < textArray.length - 1) {\n            // Wait before starting to delete\n            timeoutRef.current = setTimeout(() => setIsDeleting(true), delay);\n            return;\n          }\n        }\n      } else {\n        // Deleting mode\n        if (displayedText.length > 0) {\n          // Still have characters to delete\n          const newText = displayedText.slice(0, -1);\n          setDisplayedText(newText);\n\n          if (onTextChange) {\n            onTextChange(newText);\n          }\n        } else {\n          // Finished deleting\n          setIsDeleting(false);\n          setCurrentIndex(0);\n\n          if (textArrayIndex < textArray.length - 1 || loop) {\n            setTextArrayIndex((prev) => (prev + 1) % textArray.length);\n          }\n        }\n      }\n    };\n\n    // Schedule next typing/deleting action\n    timeoutRef.current = setTimeout(handleTyping, getTypingDelay());\n\n    return clearTimeoutRef;\n  }, [\n    displayedText,\n    currentIndex,\n    currentText,\n    isDeleting,\n    textArray,\n    textArrayIndex,\n    loop,\n    delay,\n    getTypingDelay,\n    clearTimeoutRef,\n    onTextChange,\n  ]);\n\n  return (\n    <div\n      className={cn(\n        \"relative inline-flex items-center text-primary\",\n        className,\n      )}\n    >\n      <span className=\"whitespace-pre text-primary\">{displayedText}</span>\n      {cursor && (\n        <motion.span\n          animate={{ opacity: [1, 1, 0, 0] }}\n          transition={{\n            duration: 1,\n            repeat: Infinity,\n            repeatType: \"loop\",\n            times: [0, 0.5, 0.5, 1],\n            ease: \"linear\",\n          }}\n          className={cn(\"text-primary\", cursorClassName)}\n        >\n          {cursor}\n        </motion.span>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/augustui/typing-animation.tsx"
    }
  ]
}